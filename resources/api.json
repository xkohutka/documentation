{
  "openapi": "3.0.2",
  "info": {
    "version": "2.0.0",
    "title": "ASICDE API",
    "description": "Cloud Based IDE for SystemVerilog",
    "contact": {
      "name": "ASICDE Team",
      "email": "support@asicde.org",
      "url": "https://www.asicde.com"
    }
  },
  "servers": [
    {
      "url": "https://{environment}.asicde.org/api/{version}",
      "description": "Public API endpoint",
      "variables": {
        "environment": {
          "description": "Application environment - select either production or development API endpoint",
          "enum": [
            "api",
            "api-dev"
          ],
          "default": "api"
        },
        "version": {
          "description": "API version",
          "enum": [
            "v2"
          ],
          "default": "v2"
        }
      }
    }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Authenticate with the API",
        "requestBody": {
          "$ref": "#/components/requestBodies/AuthLoginRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AuthLogin200Response"
          },
          "400": {
            "$ref": "#/components/responses/AuthLogin400Response"
          },
          "401": {
            "$ref": "#/components/responses/AuthLogin401Response"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsResponse"
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "De-authenticate current session",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          }
        }
      }
    },
    "/auth/refreshToken": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh JWT token",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AuthRefreshToken200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsResponse"
          }
        }
      }
    },
    "/auth/users": {
      "get": {
        "tags": [
          "User management"
        ],
        "summary": "Search for users from contacts (organization and team members)",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string",
              "example": "John Doe"
            },
            "required": true,
            "description": "Search query string"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 0
            },
            "required": false,
            "description": "Pagination page"
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "example": 10
            },
            "required": false,
            "description": "Pagination batch size"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AuthUserSearch200Response"
          },
          "400": {
            "$ref": "#/components/responses/AuthUserSearch400Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "User management"
        ],
        "summary": "Create a new user account",
        "requestBody": {
          "$ref": "#/components/requestBodies/AuthCreateUserRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "400": {
            "$ref": "#/components/responses/AuthCreateUser400Response"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsResponse"
          }
        }
      },
      "put": {
        "tags": [
          "User management"
        ],
        "summary": "Update user information",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AuthUpdateUserRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "400": {
            "$ref": "#/components/responses/AuthUpdateUser400Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "User management"
        ],
        "summary": "Delete user account",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/auth/users/{user_uuid}": {
      "get": {
        "tags": [
          "User management"
        ],
        "summary": "Get user details",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "User identifier string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AuthUserDetails200Response"
          },
          "400": {
            "$ref": "#/components/responses/AuthUserDetails400Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NonExistentUser"
          }
        }
      }
    },
    "/auth/users/activate/{token}": {
      "get": {
        "tags": [
          "User management"
        ],
        "summary": "Activate user account",
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Activation token"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          }
        }
      }
    },
    "/repos": {
      "get": {
        "tags": [
          "Repository management"
        ],
        "summary": "Get all user repositories",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "required": false,
            "description": "Pagination page"
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "example": 10
            },
            "required": false,
            "description": "Pagination batch size"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReposGetAll200Response"
          },
          "400": {
            "$ref": "#/components/responses/PagingError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Repository management"
        ],
        "summary": "Create new repository",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ReposCreateRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReposCreate200Response"
          },
          "400": {
            "$ref": "#/components/responses/ReposCreate400Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/repos/{repo_uuid}": {
      "get": {
        "tags": [
          "Repository management"
        ],
        "summary": "Get repository",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repo_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Repository identifier string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReposGetOne200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Repos404Response"
          }
        }
      },
      "put": {
        "tags": [
          "Repository management"
        ],
        "summary": "Update repository",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repo_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Repository identifier string"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ReposUpdateRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "400": {
            "$ref": "#/components/responses/ReposUpdate400Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Repos404Response"
          }
        }
      },
      "delete": {
        "tags": [
          "Repository management"
        ],
        "summary": "Delete repository",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repo_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Repository identifier string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/repos/{repo_uuid}/toggleFavorite": {
      "put": {
        "tags": [
          "Repository management"
        ],
        "summary": "Toggles 'favorite' flag",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repo_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Repository identifier string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReposGetOne200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Repos404Response"
          }
        }
      }
    },
    "/repos/{repo_uuid}/files": {
      "put": {
        "tags": [
          "Repository management"
        ],
        "summary": "Updates repository contents",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repo_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Repository identifier string"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/RepoFilesUpdateRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Repos404Response"
          }
        }
      }
    },
    "/repos/userAssociated": {
      "get": {
        "tags": [
          "Repository management"
        ],
        "summary": "Get all user-associated repositories (owned & team repositories)",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 0
            },
            "required": true,
            "description": "Pagination page number"
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "example": 10
            },
            "required": true,
            "description": "Pagination batch size"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReposGetUserAssociated200Response"
          },
          "400": {
            "$ref": "#/components/responses/PagingError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NonExistentUser"
          }
        }
      }
    },
    "/repos/organization": {
      "get": {
        "tags": [
          "Repository management"
        ],
        "summary": "Get all organization repositories",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "required": false,
            "description": "Pagination page"
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "example": 10
            },
            "required": false,
            "description": "Pagination batch size"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReposGetAll200Response"
          },
          "400": {
            "$ref": "#/components/responses/PagingError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/OrgGet404Response"
          }
        }
      }
    },
    "/repos/team/{team_uuid}": {
      "get": {
        "tags": [
          "Repository management"
        ],
        "summary": "Get all team repositories",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Team identifier string"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "required": false,
            "description": "Pagination page"
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "example": 10
            },
            "required": false,
            "description": "Pagination batch size"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReposGetAll200Response"
          },
          "400": {
            "$ref": "#/components/responses/PagingError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Team404"
          }
        }
      }
    },
    "/organization": {
      "get": {
        "tags": [
          "Organization management"
        ],
        "summary": "Get organization information",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OrgGet200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/OrgGet404Response"
          }
        }
      },
      "post": {
        "tags": [
          "Organization management"
        ],
        "summary": "Create a new organization",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/OrgCreateRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OrgCreate200Response"
          },
          "400": {
            "$ref": "#/components/responses/OrgCreate400Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "Organization management"
        ],
        "summary": "Update organization owner",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/OrgUpdateRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "400": {
            "$ref": "#/components/responses/OrgUpdate400Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/OrgGet404Response"
          }
        }
      },
      "delete": {
        "tags": [
          "Organization management"
        ],
        "summary": "Delete organization",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/OrgGet404Response"
          }
        }
      }
    },
    "/organization/members": {
      "get": {
        "tags": [
          "Organization member management"
        ],
        "summary": "Get organization members",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "required": false,
            "description": "Pagination page"
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "example": 10
            },
            "required": false,
            "description": "Pagination batch size"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OrgGetMembers200Response"
          },
          "400": {
            "$ref": "#/components/responses/PagingError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/OrgGet404Response"
          }
        }
      },
      "post": {
        "tags": [
          "Organization member management"
        ],
        "summary": "Invite organization member",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/OrgInviteRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "400": {
            "$ref": "#/components/responses/OrgInvite400Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/OrgGet404Response"
          }
        }
      }
    },
    "/organization/members/{member_uuid}": {
      "delete": {
        "tags": [
          "Organization member management"
        ],
        "summary": "Remove organization member",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "member_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "User identifier string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/OrgGet404Response"
          }
        }
      }
    },
    "/organization/teams": {
      "get": {
        "tags": [
          "Organization team management"
        ],
        "summary": "Get all teams in organization",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "required": false,
            "description": "Pagination page"
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "example": 10
            },
            "required": false,
            "description": "Pagination batch size"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OrgGetTeams200Response"
          },
          "400": {
            "$ref": "#/components/responses/PagingError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/OrgGet404Response"
          }
        }
      },
      "post": {
        "tags": [
          "Organization team management"
        ],
        "summary": "Create a new team",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/OrgCreateTeamRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OrgCreateTeam200Response"
          },
          "400": {
            "$ref": "#/components/responses/OrgCreateTeam400Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/OrgGet404Response"
          }
        }
      }
    },
    "/organization/teams/{team_uuid}": {
      "get": {
        "tags": [
          "Organization team management"
        ],
        "summary": "Get team details",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Team identifier string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OrgGetTeamDetails200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/OrgGet404Response"
          }
        }
      },
      "put": {
        "tags": [
          "Organization team management"
        ],
        "summary": "Update team name",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Team identifier string"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/OrgTeamUpdateRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "400": {
            "$ref": "#/components/responses/OrgTeamUpdate400Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/OrgGet404Response"
          }
        }
      },
      "delete": {
        "tags": [
          "Organization team management"
        ],
        "summary": "Remove a team",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Team identifier string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/OrgGet404Response"
          }
        }
      }
    },
    "/organization/teams/{team_uuid}/members": {
      "get": {
        "tags": [
          "Organization team management"
        ],
        "summary": "Get all team members",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Team identifier string"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "required": false,
            "description": "Pagination page"
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "example": 10
            },
            "required": false,
            "description": "Pagination batch size"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OrgTeamGetMembers200Response"
          },
          "400": {
            "$ref": "#/components/responses/PagingError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/OrgGet404Response"
          }
        }
      },
      "post": {
        "tags": [
          "Organization team management"
        ],
        "summary": "Add new team member",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Team identifier string"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/OrgTeamMemberAddRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "400": {
            "$ref": "#/components/responses/OrgTeamMemberAdd400Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/OrgGet404Response"
          }
        }
      }
    },
    "/organization/teams/{team_uuid}/members/{member_uuid}": {
      "put": {
        "tags": [
          "Organization team management"
        ],
        "summary": "Update team member role",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Team identifier string"
          },
          {
            "in": "path",
            "name": "member_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "User identifier string"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/OrgTeamMemberUpdateRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "400": {
            "$ref": "#/components/responses/OrgTeamMemberUpdate400Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/OrgGet404Response"
          }
        }
      },
      "delete": {
        "tags": [
          "Organization team management"
        ],
        "summary": "Remove a team member",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "team_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Team identifier string"
          },
          {
            "in": "path",
            "name": "member_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "User identifier string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/OrgGet404Response"
          }
        }
      }
    },
    "/organization/settings": {
      "get": {
        "tags": [
          "Organization management"
        ],
        "summary": "Get organization settings",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OrgGetSettings200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/OrgGet404Response"
          }
        }
      },
      "put": {
        "tags": [
          "Organization management"
        ],
        "summary": "Change organization settings",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/OrgSettingsUpdateRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "400": {
            "$ref": "#/components/responses/OrgGetSettingsUpdate400Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/OrgGet404Response"
          }
        }
      }
    },
    "/edu/classrooms": {
      "get": {
        "tags": [
          "Education module"
        ],
        "summary": "Get all assigned classrooms",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "required": false,
            "description": "Pagination page"
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "example": 10
            },
            "required": false,
            "description": "Pagination batch size"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EduGetAllClassrooms200Response"
          },
          "400": {
            "$ref": "#/components/responses/PagingError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Education module"
        ],
        "summary": "Create a new classroom",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/EduCreateClassroomRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "400": {
            "$ref": "#/components/responses/EduCreateClassroom400Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/edu/classrooms/join": {
      "post": {
        "tags": [
          "Education module"
        ],
        "summary": "Join an existing classroom",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/EduJoinClassroomRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "400": {
            "$ref": "#/components/responses/EduJoinClassroom400Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/edu/classrooms/{classroom_uuid}": {
      "get": {
        "tags": [
          "Education module"
        ],
        "summary": "Get classroom details",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "classroom_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Classroom identifier string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EduGetClassroomDetails200Response"
          },
          "400": {
            "$ref": "#/components/responses/PagingError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Classroom404"
          }
        }
      },
      "post": {
        "tags": [
          "Education module"
        ],
        "summary": "Locks the ability to join the classroom",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "classroom_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Classroom identifier string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Classroom404"
          }
        }
      },
      "put": {
        "tags": [
          "Education module"
        ],
        "summary": "Update classroom details",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "classroom_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Classroom identifier string"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/EduUpdateClassroomRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "400": {
            "$ref": "#/components/responses/EduUpdateClassroom400Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Classroom404"
          }
        }
      },
      "delete": {
        "tags": [
          "Education module"
        ],
        "summary": "Delete a classroom",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "classroom_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Classroom identifier string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/edu/classrooms/{classroom_uuid}/members": {
      "get": {
        "tags": [
          "Education module"
        ],
        "summary": "Get all classroom members",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "classroom_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Classroom identifier string"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "required": false,
            "description": "Pagination page"
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "example": 10
            },
            "required": false,
            "description": "Pagination batch size"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EduGetAllClassroomMembers200Response"
          },
          "400": {
            "$ref": "#/components/responses/PagingError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Classroom404"
          }
        }
      },
      "post": {
        "tags": [
          "Education module"
        ],
        "summary": "Add a teacher",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "classroom_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Classroom identifier string"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/EduInviteTeacherRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "400": {
            "$ref": "#/components/responses/EduAddClassroomTeacher400Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Classroom404"
          }
        }
      }
    },
    "/edu/classrooms/{classroom_uuid}/members/{member_uuid}": {
      "delete": {
        "tags": [
          "Education module"
        ],
        "summary": "Remove a classroom member",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "classroom_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Classroom identifier string"
          },
          {
            "in": "path",
            "name": "member_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "User identifier string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "400": {
            "$ref": "#/components/responses/PagingError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Classroom404"
          }
        }
      }
    },
    "/edu/classrooms/{classroom_uuid}/assignments": {
      "get": {
        "tags": [
          "Education module"
        ],
        "summary": "Get all classroom assignments - according to ownership and permissions",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "classroom_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Classroom identifier string"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "required": false,
            "description": "Pagination page"
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "example": 10
            },
            "required": false,
            "description": "Pagination batch size"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EduGetAllClassroomAssignments200Response"
          },
          "400": {
            "$ref": "#/components/responses/PagingError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Classroom404"
          }
        }
      },
      "post": {
        "tags": [
          "Education module"
        ],
        "summary": "Create a new assignment",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "classroom_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Classroom identifier string"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/EduCreateClassroomAssignmentRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "400": {
            "$ref": "#/components/responses/EduCreateClassroomAssignment400Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Classroom404"
          }
        }
      }
    },
    "/edu/classrooms/{classroom_uuid}/assignments/{assignment_uuid}": {
      "get": {
        "tags": [
          "Education module"
        ],
        "summary": "Get assignment details",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "classroom_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Classroom identifier string"
          },
          {
            "in": "path",
            "name": "assignment_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Assignment identifier string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EduGetClassroomAssignmentDetails200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Classroom404"
          }
        }
      },
      "post": {
        "tags": [
          "Education module"
        ],
        "summary": "Publish assignment",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "classroom_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Classroom identifier string"
          },
          {
            "in": "path",
            "name": "assignment_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Assignment identifier string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Classroom404"
          }
        }
      },
      "put": {
        "tags": [
          "Education module"
        ],
        "summary": "Update assignment details or publish the assignment",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "classroom_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Classroom identifier string"
          },
          {
            "in": "path",
            "name": "assignment_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Assignment identifier string"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/EduUpdateClassroomAssignmentRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "400": {
            "$ref": "#/components/responses/EduCreateClassroomAssignment400Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Classroom404"
          }
        }
      },
      "delete": {
        "tags": [
          "Education module"
        ],
        "summary": "Delete an assignment",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "classroom_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Classroom identifier string"
          },
          {
            "in": "path",
            "name": "assignment_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Assignment identifier string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Classroom404"
          }
        }
      }
    },
    "/chatrooms": {
      "get": {
        "tags": [
          "Chat"
        ],
        "summary": "Get available chat rooms for currently logged in user",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ChatRoomSearch200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Chat"
        ],
        "summary": "Create a new chat room",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ChatRoomCreateRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "400": {
            "$ref": "#/components/responses/ChatRoomCreate400Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NonExistentUser"
          }
        }
      }
    },
    "/chatrooms/{room_uuid}": {
      "get": {
        "tags": [
          "Chat"
        ],
        "summary": "Get chat room details",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "room_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Chat room identifier string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ChatRoomDetails200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/ChatRoom404Response"
          }
        }
      },
      "put": {
        "tags": [
          "Chat"
        ],
        "summary": "Update chat room details",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "room_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Chat room identifier string"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ChatRoomUpdateRequest"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "400": {
            "$ref": "#/components/responses/ChatRoomUpdate400Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/ChatRoom404Response"
          }
        }
      },
      "delete": {
        "tags": [
          "Chat"
        ],
        "summary": "Delete chat room",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "room_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Chat room identifier string"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/chatrooms/{room_uuid}/joinable": {
      "get": {
        "tags": [
          "Chat"
        ],
        "summary": "Verify if provided chatroom is joinable by currently logged in user",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "room_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Chat room identifier string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ChatRoomDetails200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/ChatRoom404Response"
          }
        }
      }
    },
    "/chatroom/{room_uuid}/messages/paged": {
      "get": {
        "tags": [
          "Chat"
        ],
        "summary": "Get paginated chat room messages",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "room_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Chat room identifier string"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "required": false,
            "description": "Pagination page"
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer",
              "example": 10
            },
            "required": false,
            "description": "Pagination batch size"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ChatRoomMessages200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/ChatRoom404Response"
          }
        }
      }
    },
    "/chatrooms/{room_uuid}/messages": {
      "get": {
        "tags": [
          "Chat"
        ],
        "summary": "Get unpaged chat room messages",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "room_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Chat room identifier string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ChatRoomUnpagedMessages200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/ChatRoom404Response"
          }
        }
      },
      "post": {
        "tags": [
          "Chat"
        ],
        "summary": "Add message to chat room",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "room_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Chat room identified string"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/Empty201Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/ChatRoom404Response"
          }
        }
      }
    },
    "/chatrooms/{room_uuid}/messages/{message_uuid}": {
      "delete": {
        "tags": [
          "Chat"
        ],
        "summary": "Delete a chat room message",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "room_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Chat room identifier string"
          },
          {
            "in": "path",
            "name": "message_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Chat room message identifier string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Empty200Response"
          }
        }
      }
    },
    "/chatrooms/{room_uuid}/members": {
      "post": {
        "tags": [
          "Chat"
        ],
        "summary": "Add chat members to chat room",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "room_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Chat room identifier string"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "usersUuid": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "required": [
                  "usersUuid"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Empty200Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NonExistentUser"
          }
        }
      },
      "get": {
        "tags": [
          "Chat"
        ],
        "summary": "Get chat members for selected chat room",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "room_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Chat room identifier string"
          }
        ],
        "responses": {
          "200": {
            "description": "Chat room members response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatMemberSchema"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/ChatRoom404Response"
          }
        }
      }
    },
    "/chatrooms/{room_uuid}/members/{memberUuid}": {
      "get": {
        "tags": [
          "Chat"
        ],
        "summary": "Get single chat member for selected room",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "room_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Chat room identifier string"
          },
          {
            "in": "path",
            "name": "memberUuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Chat member identifier string"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/schemas/ChatMemberSchema"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/ChatRoom404Response"
          }
        }
      },
      "delete": {
        "tags": [
          "Chat"
        ],
        "summary": "Delete single chat member for selected chat room",
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "room_uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Chat room identifier string"
          },
          {
            "in": "path",
            "name": "memberUuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "Chat member identifier string"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Empty204Response"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/ChatRoom404Response"
          }
        }
      }
    },
    "/collab/workspace/{repoId}/initFromGit": {
      "post": {
        "summary": "Initializes a collaboration workspace from git URI.",
        "description": "This method clones the remote repository and loads all files and branches into the collaboration context. Any existing repository with the same name and author will be replaced, as well as any existing collaborative documents.",
        "operationId": "initFromGit",
        "tags": [
          "Collab Workspaces"
        ],
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/repoId"
          },
          {
            "$ref": "#/components/parameters/auth"
          }
        ],
        "requestBody": {
          "description": "Information required to clone and initialize a remote repo",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollabInitFromGit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabSuccess"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Repo not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Branch already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/collab/workspace/{repoId}/init": {
      "post": {
        "summary": "Initializes a collaboration workspace from repo files ZIP.",
        "operationId": "initWorkspace",
        "tags": [
          "Collab Workspaces"
        ],
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/repoId"
          },
          {
            "$ref": "#/components/parameters/auth"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CollabInitFromZip"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabSuccess"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Repo not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Branch already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/collab/workspace/{repoId}": {
      "delete": {
        "summary": "Deletes workspace and it's files",
        "tags": [
          "Collab Workspaces"
        ],
        "security": [
          {
            "bearerToken": []
          }
        ],
        "operationId": "deleteWorkspace",
        "parameters": [
          {
            "$ref": "#/components/parameters/repoId"
          },
          {
            "$ref": "#/components/parameters/auth"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabSuccess"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Repo not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/collab/git/{repoId}/commit": {
      "post": {
        "summary": "Commits files",
        "description": "Commit changes in selected repository",
        "tags": [
          "Collab Git"
        ],
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/repoId"
          },
          {
            "$ref": "#/components/parameters/auth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollabCommit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabSuccess"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Base branch or repo not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Branch already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/collab/git/{repoId}/push": {
      "post": {
        "summary": "Pushes files to remote",
        "tags": [
          "Collab Git"
        ],
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/repoId"
          },
          {
            "$ref": "#/components/parameters/auth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollabPushPull"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabSuccess"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Base branch not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Branch already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/collab/git/{repoId}/pull": {
      "post": {
        "summary": "Pulls files from remote",
        "tags": [
          "Collab Git"
        ],
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/repoId"
          },
          {
            "$ref": "#/components/parameters/auth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollabPushPull"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabSuccess"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Base branch not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Branch already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/collab/git/{repoId}/branch": {
      "post": {
        "summary": "Creates a new branch",
        "tags": [
          "Collab Git"
        ],
        "security": [
          {
            "bearerToken": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/repoId"
          },
          {
            "$ref": "#/components/parameters/auth"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollabNewBranch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabSuccess"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Base branch not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Branch already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Merges a branch",
        "tags": [
          "Collab Git"
        ],
        "security": [
          {
            "bearerToken": []
          }
        ],
        "operationId": "gitMerge",
        "parameters": [
          {
            "$ref": "#/components/parameters/repoId"
          },
          {
            "$ref": "#/components/parameters/auth"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollabMergeBranch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabSuccess"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Base branch not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Branch already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollabErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/parser/getPackageData": {
      "post": {
        "tags": [
          "Code parser"
        ],
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Parses the given source codes and extracts the essential data on return",
        "operationId": "parsePackageInformation",
        "requestBody": {
          "description": "SystemVerilog package source code",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParserSourceCode"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "data from package code",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParserPackageItem"
                  }
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParserErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/parser/getVisualizationData": {
      "post": {
        "tags": [
          "Code parser"
        ],
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Parses the given source codes and extracts the essential data on return",
        "operationId": "parseForVisualization",
        "requestBody": {
          "description": "SystemVerilog source code",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParserSourceCode"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "data for code",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParserExtractedElements"
                  }
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParserErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/parser/getDataForSubDiagram": {
      "post": {
        "tags": [
          "Code parser"
        ],
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Parses the given source code and extracts the essential data on return",
        "operationId": "parseForSubDiaVisualization",
        "requestBody": {
          "description": "SystemVerilog source code and identified submodule interfaces",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParserVisualizationData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "data for code",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParserExtractedElements"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParserErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/parser/getSubModules": {
      "post": {
        "tags": [
          "Code parser"
        ],
        "security": [
          {
            "bearerToken": []
          }
        ],
        "summary": "Parses the given source code and extracts the submodules for interface parsing on return",
        "operationId": "parseForSubModuleInteraceRecognition",
        "requestBody": {
          "description": "SystemVerilog source code",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParserSourceCode"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "data for code",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParserIdentifiedSubmodules"
                  }
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParserErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "repoId": {
        "name": "repoId",
        "in": "path",
        "required": true,
        "description": "ID of the repo",
        "schema": {
          "type": "string"
        }
      },
      "auth": {
        "name": "authorization",
        "in": "header",
        "required": true,
        "description": "Auth token",
        "schema": {
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "bearerToken": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "SortSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "sorted",
              "unsorted",
              "empty"
            ],
            "properties": {
              "sorted": {
                "type": "boolean",
                "example": false
              },
              "unsorted": {
                "type": "boolean",
                "example": true
              },
              "empty": {
                "type": "boolean",
                "example": true
              }
            }
          }
        ]
      },
      "PageableSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "sort",
              "offset",
              "pageSize",
              "pageNumber",
              "paged",
              "unpaged"
            ],
            "properties": {
              "sort": {
                "$ref": "#/components/schemas/SortSchema"
              },
              "offset": {
                "type": "integer",
                "example": 0
              },
              "pageSize": {
                "type": "integer",
                "example": 4
              },
              "pageNumber": {
                "type": "integer",
                "example": 0
              },
              "paged": {
                "type": "boolean",
                "example": true
              },
              "unpaged": {
                "type": "boolean",
                "example": false
              }
            }
          }
        ]
      },
      "PagingSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "pageable",
              "totalElements",
              "totalPages",
              "last",
              "size",
              "number",
              "sort",
              "numberOfElements",
              "first",
              "empty"
            ],
            "properties": {
              "pageable": {
                "$ref": "#/components/schemas/PageableSchema"
              },
              "totalElements": {
                "type": "integer",
                "example": 4
              },
              "totalPages": {
                "type": "integer",
                "example": 1
              },
              "last": {
                "type": "boolean",
                "example": true
              },
              "size": {
                "type": "integer",
                "example": 4
              },
              "number": {
                "type": "integer",
                "example": 0
              },
              "sort": {
                "$ref": "#/components/schemas/SortSchema"
              },
              "numberOfElements": {
                "type": "integer",
                "example": 4
              },
              "first": {
                "type": "boolean",
                "example": true
              },
              "empty": {
                "type": "boolean",
                "example": false
              }
            }
          }
        ]
      },
      "TokenSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "token",
              "tokenType",
              "expiration"
            ],
            "properties": {
              "token": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
              },
              "tokenType": {
                "type": "string",
                "example": "Bearer"
              },
              "expiration": {
                "type": "string",
                "format": "date-time",
                "example": "2021-03-24T08:21:23.555+0100"
              }
            }
          }
        ]
      },
      "AuditedTimeSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "created",
              "lastModified"
            ],
            "properties": {
              "created": {
                "type": "string",
                "format": "date-time",
                "example": "2021-03-24T08:21:23.555+0100"
              },
              "lastModified": {
                "type": "string",
                "format": "date-time",
                "example": "2021-03-24T08:21:23.555+0100"
              }
            }
          }
        ]
      },
      "AuditedUserSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "created_by",
              "last_modified_by"
            ],
            "properties": {
              "created_by": {
                "type": "string",
                "example": "user1"
              },
              "last_modified_by": {
                "type": "string",
                "example": "user1"
              }
            }
          }
        ]
      },
      "UserSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "uuid",
              "username",
              "email",
              "firstName",
              "lastName"
            ],
            "properties": {
              "uuid": {
                "type": "string",
                "format": "uuid"
              },
              "username": {
                "type": "string",
                "example": "john.doe"
              },
              "email": {
                "type": "string",
                "format": "email",
                "example": "john.doe@mail.com"
              },
              "firstName": {
                "type": "string",
                "example": "John"
              },
              "lastName": {
                "type": "string",
                "example": "Doe"
              }
            }
          }
        ]
      },
      "UserDetailSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "uuid",
              "username",
              "email",
              "firstName",
              "lastName"
            ],
            "properties": {
              "uuid": {
                "type": "string",
                "format": "uuid"
              },
              "username": {
                "type": "string",
                "example": "john.doe"
              },
              "email": {
                "type": "string",
                "format": "email",
                "example": "john.doe@mail.com"
              },
              "firstName": {
                "type": "string",
                "example": "John"
              },
              "lastName": {
                "type": "string",
                "example": "Doe"
              },
              "created": {
                "type": "string",
                "format": "timestamp",
                "example": "2021-04-19T03:26:12.121+0000"
              },
              "lastModified": {
                "type": "string",
                "format": "timestamp",
                "example": "2021-04-19T03:26:12.121+0000"
              }
            }
          }
        ]
      },
      "UsersSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "user"
            ],
            "properties": {
              "user": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UserSchema"
                  }
                ]
              }
            }
          }
        ]
      },
      "OrganizationsSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "organization"
            ],
            "properties": {
              "organization": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrgGetSuccessSchema"
                  }
                ]
              }
            }
          }
        ]
      },
      "MemberSchema": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/UserSchema"
          },
          {
            "properties": {
              "role": {
                "type": "string",
                "enum": [
                  "invited",
                  "member",
                  "admin"
                ],
                "default": "member"
              }
            }
          }
        ]
      },
      "ClassroomMemberSchema": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditedTimeSchema"
          },
          {
            "properties": {
              "user": {
                "$ref": "#/components/schemas/UserSchema"
              },
              "role": {
                "type": "string",
                "enum": [
                  "OWNER",
                  "ADMIN",
                  "STUDENT"
                ],
                "default": "STUDENT"
              }
            }
          }
        ]
      },
      "TeamMemberSchema": {
        "type": "object",
        "allOf": [
          {
            "properties": {
              "uuid": {
                "type": "string",
                "format": "uuid"
              },
              "user": {
                "$ref": "#/components/schemas/UserSchema"
              },
              "permission": {
                "type": "string",
                "default": "READ",
                "enum": [
                  "ADMIN",
                  "READ",
                  "READ-WRITE"
                ]
              }
            }
          }
        ]
      },
      "RepoDto": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditedTimeSchema"
          },
          {
            "required": [
              "uuid",
              "createdBy",
              "lastModifiedBy",
              "name",
              "authorUUID",
              "fileName",
              "favorite",
              "description",
              "uri"
            ],
            "properties": {
              "uuid": {
                "type": "string",
                "format": "uuid"
              },
              "createdBy": {
                "type": "string"
              },
              "lastModifiedBy": {
                "type": "string"
              },
              "name": {
                "type": "string",
                "example": "Repository1"
              },
              "authorUUID": {
                "type": "string",
                "format": "uuid"
              },
              "fileName": {
                "type": "string"
              },
              "favorite": {
                "type": "boolean",
                "example": true
              },
              "description": {
                "type": "string"
              },
              "uri": {
                "type": "string",
                "example": "git@github.com:ASICDE/documentation.git"
              }
            }
          }
        ]
      },
      "UserAssociatedRepoSchemaLite": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepoDto"
          }
        ]
      },
      "RepoAuthorizationSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "authorization"
            ],
            "properties": {
              "authorization": {
                "type": "object",
                "allOf": [
                  {
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "none",
                          "plaintext",
                          "ssh",
                          "organization"
                        ],
                        "default": "plaintext"
                      },
                      "username": {
                        "type": "string",
                        "example": "githubuser"
                      },
                      "password": {
                        "type": "string",
                        "example": "supersecret"
                      },
                      "sshKey": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "RepoSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "Repository1"
              },
              "authorUUID": {
                "type": "string",
                "format": "uuid"
              },
              "fileName": {
                "type": "string"
              },
              "uri": {
                "type": "string",
                "example": "git@github.com:ASICDE/documentation.git"
              },
              "description": {
                "type": "string",
                "example": "some description"
              },
              "favorite": {
                "type": "boolean",
                "example": true
              }
            }
          }
        ]
      },
      "RepoDetailsSchema": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditedTimeSchema"
          },
          {
            "$ref": "#/components/schemas/AuditedUserSchema"
          },
          {
            "$ref": "#/components/schemas/RepoSchema"
          },
          {
            "required": [
              "archived",
              "favorite"
            ]
          }
        ]
      },
      "TeamDto": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "name",
              "memberships",
              "organization",
              "repo"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "Team1"
              },
              "organization": {
                "$ref": "#/components/schemas/OrganizationsSchema"
              },
              "repo": {
                "$ref": "#/components/schemas/RepoDto"
              }
            }
          },
          {
            "$ref": "#/components/schemas/AuditedTimeSchema"
          },
          {
            "$ref": "#/components/schemas/AuditedUserSchema"
          }
        ]
      },
      "TeamInfoSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "uuid",
              "name",
              "member",
              "owner"
            ],
            "properties": {
              "uuid": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string",
                "example": "Team1"
              },
              "owner": {
                "type": "string",
                "format": "uuid"
              },
              "member": {
                "type": "boolean",
                "example": true
              }
            }
          },
          {
            "$ref": "#/components/schemas/AuditedTimeSchema"
          },
          {
            "$ref": "#/components/schemas/AuditedUserSchema"
          }
        ]
      },
      "ClassroomSchema": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ClassroomSchemaLite"
          },
          {
            "required": [
              "slug"
            ],
            "properties": {
              "slug": {
                "type": "string",
                "example": "fei-stuba-asic-01"
              }
            }
          },
          {
            "$ref": "#/components/schemas/AuditedTimeSchema"
          },
          {
            "$ref": "#/components/schemas/AuditedUserSchema"
          }
        ]
      },
      "ClassroomSchemaLite": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "uuid",
              "name"
            ],
            "properties": {
              "uuid": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string",
                "example": "Classroom1"
              },
              "locked": {
                "type": "boolean"
              },
              "slug": {
                "type": "string",
                "example": "classroomslug"
              },
              "password": {
                "type": "string",
                "example": "classroompassword"
              }
            }
          },
          {
            "$ref": "#/components/schemas/AuditedTimeSchema"
          },
          {
            "$ref": "#/components/schemas/AuditedUserSchema"
          }
        ]
      },
      "ClassroomAssignmentSchema": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ClassroomAssignmentSchemaLite"
          }
        ]
      },
      "ClassroomAssignmentSchemaLite": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "uuid",
              "name",
              "author",
              "parent",
              "classroom",
              "dueDate",
              "published"
            ],
            "properties": {
              "uuid": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string",
                "example": "Assignment1"
              },
              "author": {
                "$ref": "#/components/schemas/UserSchema"
              },
              "parent": {
                "$ref": "#/components/schemas/ParentClassroomAssignmentSchemaLite"
              },
              "classroom": {
                "$ref": "#/components/schemas/ClassroomSchema"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time",
                "example": "2021-03-24T08:21:23.555+0100"
              },
              "published": {
                "type": "boolean"
              }
            }
          },
          {
            "$ref": "#/components/schemas/AuditedTimeSchema"
          },
          {
            "$ref": "#/components/schemas/AuditedUserSchema"
          }
        ]
      },
      "ParentClassroomAssignmentSchemaLite": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "uuid",
              "name",
              "author",
              "parent",
              "classroom",
              "dueDate",
              "published"
            ],
            "properties": {
              "uuid": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string",
                "example": "Assignment1"
              },
              "author": {
                "$ref": "#/components/schemas/UserSchema"
              },
              "parent": {
                "nullable": true,
                "example": null
              },
              "classroom": {
                "$ref": "#/components/schemas/ClassroomSchema"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time",
                "example": "2021-03-24T08:21:23.555+0100"
              },
              "published": {
                "type": "boolean"
              }
            }
          },
          {
            "$ref": "#/components/schemas/AuditedTimeSchema"
          },
          {
            "$ref": "#/components/schemas/AuditedUserSchema"
          }
        ]
      },
      "ChatRoomSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "uuid",
              "name",
              "owner",
              "created",
              "createdBy",
              "lastModified",
              "lastModifiedBy",
              "members"
            ],
            "properties": {
              "uuid": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string",
                "example": "Chat room 1"
              },
              "organization": {
                "$ref": "#/components/schemas/OrganizationsSchema"
              },
              "team": {
                "$ref": "#/components/schemas/TeamDto"
              },
              "repo": {
                "$ref": "#/components/schemas/RepoSchema"
              },
              "created": {
                "type": "string",
                "format": "date-time",
                "example": "2021-03-24T08:21:23.555+0100"
              },
              "createdBy": {
                "type": "string",
                "format": "uuid"
              },
              "last_activity": {
                "type": "string",
                "format": "date-time",
                "example": "2021-03-24T08:21:23.555+0100"
              },
              "members": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChatMemberSchema"
                }
              }
            }
          }
        ]
      },
      "ChatMemberSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "uuid",
              "name",
              "user",
              "chatRoom"
            ],
            "properties": {
              "uuid": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string",
                "example": "chatuser124"
              },
              "user": {
                "$ref": "#/components/schemas/UserSchema"
              },
              "chatRoom": {
                "$ref": "#/components/schemas/ChatRoomSchema"
              }
            }
          }
        ]
      },
      "ChatMessageSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "uuid",
              "message",
              "author",
              "epochTimestamp"
            ],
            "properties": {
              "uuid": {
                "type": "string",
                "format": "uuid"
              },
              "message": {
                "type": "string",
                "example": "Hello world"
              },
              "author": {
                "type": "string",
                "example": "chatuser124",
                "description": "Username of chatmember who posted selected chat message"
              },
              "epochTimestamp": {
                "type": "number",
                "example": 1618440477
              }
            }
          }
        ]
      },
      "AuthLoginSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "username",
              "password"
            ],
            "properties": {
              "username": {
                "type": "string"
              },
              "password": {
                "type": "string",
                "format": "password"
              }
            }
          }
        ]
      },
      "AuthCreateUserSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "username",
              "password",
              "email",
              "firstName",
              "lastName"
            ],
            "properties": {
              "username": {
                "type": "string"
              },
              "password": {
                "type": "string",
                "format": "password"
              },
              "email": {
                "type": "string",
                "format": "email"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          }
        ]
      },
      "AuthUpdateUserRequestSchema": {
        "type": "object",
        "allOf": [
          {
            "properties": {
              "username": {
                "type": "string",
                "example": "john.doe"
              },
              "oldPassword": {
                "type": "string",
                "format": "password"
              },
              "password": {
                "type": "string",
                "format": "password"
              },
              "email": {
                "type": "string",
                "format": "email"
              },
              "firstName": {
                "type": "string",
                "example": "John"
              },
              "lastName": {
                "type": "string",
                "example": "Doe"
              },
              "description": {
                "type": "string",
                "example": "some description"
              }
            }
          }
        ]
      },
      "ReposCreateRequestSchema": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepoSchema"
          }
        ]
      },
      "RepoUpdateRequestSchema": {
        "type": "object",
        "allOf": [
          {
            "properties": {
              "name": {
                "type": "string",
                "example": "Repository2"
              },
              "uri": {
                "type": "string",
                "example": "git@github.com:ASICDE/documentation.git"
              },
              "description": {
                "type": "string",
                "example": "some description"
              }
            }
          }
        ]
      },
      "OrgCreateRequestSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "Acme"
              }
            }
          }
        ]
      },
      "OrgUpdateRequestSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "owner"
            ],
            "properties": {
              "owner": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ]
      },
      "OrgInviteRequestSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "email"
            ],
            "properties": {
              "email": {
                "type": "string",
                "example": "alice.gordon@mail.com"
              }
            }
          }
        ]
      },
      "OrgMemberUpdateRequestSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "role"
            ],
            "properties": {
              "role": {
                "type": "string",
                "default": null,
                "enum": [
                  "member",
                  "admin"
                ]
              }
            }
          }
        ]
      },
      "OrgCreateTeamRequestSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "Team1"
              }
            }
          }
        ]
      },
      "OrgTeamUpdateRequestSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "Team1"
              }
            }
          }
        ]
      },
      "OrgTeamMemberAddRequestSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "uuid",
              "role"
            ],
            "properties": {
              "uuid": {
                "type": "string",
                "format": "uuid"
              },
              "role": {
                "type": "string",
                "default": "READ",
                "enum": [
                  "ADMIN",
                  "READ",
                  "READ-WRITE"
                ]
              }
            }
          }
        ]
      },
      "OrgTeamMemberUpdateRequestSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "role"
            ],
            "properties": {
              "role": {
                "type": "string",
                "default": "READ",
                "enum": [
                  "ADMIN",
                  "READ",
                  "READ-WRITE"
                ]
              }
            }
          }
        ]
      },
      "OrgSettingsUpdateRequestSchema": {
        "type": "object",
        "allOf": [
          {
            "properties": {
              "name_policy": {
                "type": "string",
                "enum": [
                  "username",
                  "fullname",
                  "email"
                ]
              },
              "reader_by_default": {
                "type": "boolean",
                "example": true
              },
              "authorization": {
                "type": "object",
                "allOf": [
                  {
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "none",
                          "plaintext",
                          "ssh",
                          "organization"
                        ],
                        "default": "plaintext"
                      },
                      "username": {
                        "type": "string",
                        "example": "githubuser"
                      },
                      "password": {
                        "type": "string",
                        "example": "supersecret"
                      },
                      "sshKey": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "EduCreateClassroomRequestSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "name",
              "slug",
              "password"
            ],
            "properties": {
              "name": {
                "type": "string",
                "example": "Classroom1"
              },
              "slug": {
                "type": "string",
                "example": "fei-stuba-asic-01"
              },
              "password": {
                "type": "string",
                "example": "strongpassword"
              }
            }
          }
        ]
      },
      "EduJoinClassroomRequestSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "slug",
              "password"
            ],
            "properties": {
              "slug": {
                "type": "string",
                "example": "fei-stuba-asic-01"
              },
              "password": {
                "type": "string",
                "example": "strongpassword"
              }
            }
          }
        ]
      },
      "EduInviteTeacherRequestSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "email"
            ],
            "properties": {
              "email": {
                "type": "string",
                "example": "teacher@school.com"
              }
            }
          }
        ]
      },
      "EduUpdateClassroomRequestSchema": {
        "type": "object",
        "allOf": [
          {
            "properties": {
              "name": {
                "type": "string",
                "example": "Classroom1"
              },
              "slug": {
                "type": "string",
                "example": "fei-stuba-asic-01"
              },
              "password": {
                "type": "string",
                "example": "strongpassword"
              }
            }
          }
        ]
      },
      "EduCreateClassroomAssignmentRequestSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "name",
              "published"
            ]
          },
          {
            "properties": {
              "name": {
                "type": "string",
                "example": "Assignment2"
              },
              "dueDate": {
                "type": "string",
                "format": "date-time",
                "example": "2021-03-24T08:21:23.555+0100"
              }
            }
          }
        ]
      },
      "EduUpdateClassroomAssignmentRequestSchema": {
        "type": "object",
        "allOf": [
          {
            "properties": {
              "dueDate": {
                "type": "string",
                "format": "date-time",
                "example": "2021-03-24T08:21:23.555+0100"
              },
              "description": {
                "type": "string",
                "example": "description"
              }
            }
          }
        ]
      },
      "ChatRoomCreateRequestSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "name",
              "members"
            ]
          },
          {
            "properties": {
              "name": {
                "type": "string",
                "example": "Chat room 1"
              },
              "shouldExpireIn": {
                "type": "integer",
                "example": 30,
                "description": "Room expires in ${shouldExpireIn} days after creation"
              },
              "members": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "organizationUuid": {
                "type": "string",
                "format": "uuid"
              },
              "teamUuid": {
                "type": "string",
                "format": "uuid"
              },
              "repuUuid": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ]
      },
      "ChatRoomUpdateRequestSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "name"
            ]
          },
          {
            "properties": {
              "name": {
                "type": "string",
                "example": "Chat room 1"
              },
              "membersToRemove": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "membersToAdd": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        ]
      },
      "ErrorResponseSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "code"
            ],
            "properties": {
              "code": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            }
          }
        ]
      },
      "AuthLoginSuccessSchema": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenSchema"
          },
          {
            "$ref": "#/components/schemas/UsersSchema"
          },
          {
            "$ref": "#/components/schemas/OrganizationsSchema"
          }
        ]
      },
      "AuthRefreshTokenSuccessSchema": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TokenSchema"
          }
        ]
      },
      "AuthUserSearchSuccessSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "content"
            ],
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/UserDetailSchema"
                    }
                  ]
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/PagingSchema"
          }
        ]
      },
      "RepoCreateSuccessSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "uuid"
            ],
            "properties": {
              "uuid": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ]
      },
      "RepoGetAllSuccessSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "content"
            ],
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RepoDto"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/PagingSchema"
          }
        ]
      },
      "RepoGetUserAssociatedSuccessSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "data"
            ],
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserAssociatedRepoSchemaLite"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/PagingSchema"
          }
        ]
      },
      "RepoGetOneSuccessSchema": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepoDto"
          }
        ]
      },
      "OrgCreateSuccessSchema": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditedTimeSchema"
          },
          {
            "required": [
              "uuid",
              "createdBy",
              "lastModifiedBy",
              "name",
              "owner",
              "invites",
              "teams"
            ],
            "properties": {
              "uuid": {
                "type": "string",
                "format": "uuid"
              },
              "createdBy": {
                "type": "string",
                "example": "user1"
              },
              "lastModifiedBy": {
                "type": "string",
                "example": "user1"
              },
              "name": {
                "type": "string",
                "example": "Acme"
              },
              "owner": {
                "$ref": "#/components/schemas/UserDetailSchema"
              },
              "invites": {
                "type": "array",
                "$ref": "#/components/schemas/SortSchema"
              },
              "teams": {
                "type": "array",
                "$ref": "#/components/schemas/SortSchema"
              }
            }
          }
        ]
      },
      "OrgGetSuccessSchema": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AuditedTimeSchema"
          },
          {
            "required": [
              "uuid",
              "name",
              "owner",
              "createdBy",
              "lastModifiedBy"
            ],
            "properties": {
              "createdBy": {
                "type": "string",
                "example": "user1"
              },
              "lastModifiedBy": {
                "type": "string",
                "example": "user1"
              },
              "uuid": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string",
                "example": "Acme"
              },
              "owner": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ]
      },
      "OrgGetMembersSuccessSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "content"
            ],
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MemberSchema"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/PagingSchema"
          }
        ]
      },
      "OrgGetTeamsSuccessSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "content"
            ],
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TeamInfoSchema"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/PagingSchema"
          }
        ]
      },
      "OrgCreateTeamSuccessSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "uuid"
            ],
            "properties": {
              "uuid": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ]
      },
      "OrgGetTeamDetailsSuccessSchema": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TeamDto"
          }
        ]
      },
      "OrgTeamGetMembersSuccessSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "content"
            ],
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TeamMemberSchema"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/PagingSchema"
          }
        ]
      },
      "OrgGetSettingsSuccessSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "name_policy"
            ],
            "properties": {
              "name_policy": {
                "type": "string",
                "enum": [
                  "username",
                  "fullname",
                  "email"
                ]
              },
              "reader_by_default": {
                "type": "boolean",
                "example": true
              },
              "authorization": {
                "type": "object",
                "allOf": [
                  {
                    "required": [
                      "type"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "none",
                          "plaintext",
                          "ssh"
                        ],
                        "default": "plaintext"
                      },
                      "username": {
                        "type": "string",
                        "example": "githubuser"
                      },
                      "password": {
                        "type": "string",
                        "example": "supersecret"
                      },
                      "sshKey": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "ClassroomsGetAllSuccessSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "content"
            ],
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ClassroomSchemaLite"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/PagingSchema"
          }
        ]
      },
      "ClassroomsGetOneSuccessSchema": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ClassroomSchema"
          }
        ]
      },
      "ClassroomMembersGetAllSuccessSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "content"
            ],
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ClassroomMemberSchema"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/PagingSchema"
          }
        ]
      },
      "ClassroomAssignmentsGetAllSuccessSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "content"
            ],
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ClassroomAssignmentSchemaLite"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/PagingSchema"
          }
        ]
      },
      "ClassroomAssignmentsGetOneSuccessSchema": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ClassroomAssignmentSchema"
          }
        ]
      },
      "ChatRoomSearchSuccessSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "content"
            ],
            "properties": {
              "totalItems": {
                "type": "integer",
                "example": 1
              },
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChatRoomSchema"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/PagingSchema"
          }
        ]
      },
      "ChatRoomMessagesSuccessSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "content"
            ],
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChatMessageSchema"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/PagingSchema"
          }
        ]
      },
      "ChatRoomUnpagedMessagesSuccessSchema": {
        "type": "object",
        "allOf": [
          {
            "required": [
              "messages"
            ],
            "properties": {
              "messages": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChatMessageSchema"
                }
              }
            }
          }
        ]
      },
      "CollabInitFromGit": {
        "type": "object",
        "required": [
          "author",
          "uri"
        ],
        "anyOf": [
          {
            "properties": {
              "author": {
                "type": "string",
                "description": "Username of repo author"
              },
              "uri": {
                "type": "string",
                "description": "URI for remote repository"
              }
            }
          },
          {
            "$ref": "#/components/schemas/CollabGitCredentials"
          }
        ]
      },
      "CollabInitFromZip": {
        "required": [
          "file",
          "author"
        ],
        "properties": {
          "author": {
            "type": "string",
            "description": "Username of repo author"
          },
          "file": {
            "description": ".zip file to upload",
            "type": "string",
            "format": "binary"
          }
        }
      },
      "CollabGitCredentials": {
        "type": "object",
        "required": [
          "gitUsername",
          "gitPassword"
        ],
        "properties": {
          "gitUsername": {
            "type": "string",
            "description": "Username for remote repository"
          },
          "gitPassword": {
            "type": "string",
            "format": "password",
            "description": "Password for remote repository"
          }
        }
      },
      "CollabCommit": {
        "required": [
          "message",
          "branch"
        ],
        "allOf": [
          {
            "properties": {
              "message": {
                "type": "string",
                "description": "Commit message"
              },
              "files": {
                "type": "array",
                "default": [],
                "items": {
                  "type": "string"
                },
                "description": "List of collab document IDs representing files to be commited. If not specified, all files are commited."
              }
            }
          },
          {
            "$ref": "#/components/schemas/CollabBranch"
          }
        ]
      },
      "CollabPushPull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollabGitCredentials"
          },
          {
            "$ref": "#/components/schemas/CollabBranch"
          }
        ]
      },
      "CollabBranch": {
        "required": [
          "branch"
        ],
        "properties": {
          "branch": {
            "type": "string",
            "description": "Branch to work on",
            "default": "master"
          }
        }
      },
      "CollabNewBranch": {
        "required": [
          "new"
        ],
        "properties": {
          "base": {
            "type": "string",
            "description": "Branch on which the new one should be based",
            "default": "master"
          },
          "new": {
            "type": "string",
            "description": "New branch name"
          }
        }
      },
      "CollabMergeBranch": {
        "properties": {
          "merging": {
            "type": "string",
            "description": "Name of the branch being merged"
          },
          "into": {
            "type": "string",
            "description": "Name of the target branch to merge into",
            "default": "master"
          }
        }
      },
      "CollabSuccess": {
        "properties": {
          "msg": {
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        }
      },
      "CollabErrorResponse": {
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ParserPackageItem": {
        "required": [
          "dataType",
          "dataName"
        ],
        "properties": {
          "dataType": {
            "type": "string"
          },
          "dataName": {
            "type": "string"
          }
        }
      },
      "ParserVisualizationData": {
        "required": [
          "sourceCode",
          "subModuleInterfaces"
        ],
        "properties": {
          "sourceCode": {
            "type": "string"
          },
          "subModuleInterfaces": {
            "type": "string"
          }
        }
      },
      "ParserSourceCode": {
        "required": [
          "sourceCode"
        ],
        "properties": {
          "sourceCode": {
            "type": "string"
          }
        }
      },
      "ParserIdentifiedSubmodules": {
        "required": [
          "identifiedModules",
          "identifiedInstance"
        ],
        "properties": {
          "identifiedModules": {
            "type": "string"
          },
          "identifiedInstance": {
            "type": "string"
          }
        }
      },
      "ParserExtractedElements": {
        "required": [
          "json"
        ],
        "properties": {
          "json": {
            "type": "string"
          }
        }
      },
      "ParserErrorResponse": {
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "requestBodies": {
      "AuthLoginRequest": {
        "required": true,
        "description": "Authentication request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AuthLoginSchema"
            },
            "example": {
              "username": "john.doe",
              "password": "supersecret"
            }
          }
        }
      },
      "AuthCreateUserRequest": {
        "required": true,
        "description": "User creation request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AuthCreateUserSchema"
            },
            "example": {
              "username": "john.doe",
              "password": "supersecret",
              "email": "john.doe@mail.com",
              "firstName": "John",
              "lastName": "Doe",
              "description": "some description here"
            }
          }
        }
      },
      "AuthUpdateUserRequest": {
        "required": true,
        "description": "User creation request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AuthUpdateUserRequestSchema"
            },
            "example": {
              "password": "betterpassword"
            }
          }
        }
      },
      "ReposCreateRequest": {
        "required": true,
        "description": "Create a new repository",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReposCreateRequestSchema"
            }
          }
        }
      },
      "ReposUpdateRequest": {
        "required": true,
        "description": "Repo update request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RepoUpdateRequestSchema"
            },
            "example": {
              "uri": "git@github.com:ASICDE/documentation-new.git"
            }
          }
        }
      },
      "RepoFilesUpdateRequest": {
        "required": true,
        "description": "Repo files update request",
        "content": {
          "application/zip": {
            "schema": {
              "type": "string",
              "format": "binary",
              "example": "Binary contents"
            }
          }
        }
      },
      "OrgCreateRequest": {
        "required": true,
        "description": "Organization creation request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OrgCreateRequestSchema"
            }
          }
        }
      },
      "OrgUpdateRequest": {
        "required": true,
        "description": "Organization team member update request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OrgUpdateRequestSchema"
            }
          }
        }
      },
      "OrgInviteRequest": {
        "required": true,
        "description": "Organization invitation request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OrgInviteRequestSchema"
            }
          }
        }
      },
      "OrgMemberUpdateRequest": {
        "required": true,
        "description": "Organization team member update request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OrgMemberUpdateRequestSchema"
            },
            "example": {
              "role": "admin"
            }
          }
        }
      },
      "OrgCreateTeamRequest": {
        "required": true,
        "description": "Team creation request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OrgCreateTeamRequestSchema"
            }
          }
        }
      },
      "OrgTeamUpdateRequest": {
        "required": true,
        "description": "Organization team update request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OrgTeamUpdateRequestSchema"
            },
            "example": {
              "name": "Team2"
            }
          }
        }
      },
      "OrgTeamMemberAddRequest": {
        "required": true,
        "description": "Organization team member add request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OrgTeamMemberAddRequestSchema"
            },
            "example": {
              "uuid": "ad54a995-b35b-4a42-9353-629cb205d12b",
              "role": "admin"
            }
          }
        }
      },
      "OrgTeamMemberUpdateRequest": {
        "required": true,
        "description": "Organization team member update request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OrgTeamMemberUpdateRequestSchema"
            },
            "example": {
              "role": "contributor"
            }
          }
        }
      },
      "OrgSettingsUpdateRequest": {
        "required": true,
        "description": "Organization settings update request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OrgSettingsUpdateRequestSchema"
            },
            "example": {
              "name_policy": "fullname"
            }
          }
        }
      },
      "EduCreateClassroomRequest": {
        "required": true,
        "description": "Classroom creation request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EduCreateClassroomRequestSchema"
            }
          }
        }
      },
      "EduJoinClassroomRequest": {
        "required": true,
        "description": "Classroom creation request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EduJoinClassroomRequestSchema"
            }
          }
        }
      },
      "EduInviteTeacherRequest": {
        "required": true,
        "description": "Teacher invitation request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EduInviteTeacherRequestSchema"
            }
          }
        }
      },
      "EduUpdateClassroomRequest": {
        "required": true,
        "description": "Classroom creation request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EduUpdateClassroomRequestSchema"
            }
          }
        }
      },
      "EduCreateClassroomAssignmentRequest": {
        "required": true,
        "description": "Classroom assignment creation request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EduCreateClassroomAssignmentRequestSchema"
            }
          }
        }
      },
      "EduUpdateClassroomAssignmentRequest": {
        "required": true,
        "description": "Classroom assignment update request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EduUpdateClassroomAssignmentRequestSchema"
            }
          }
        }
      },
      "ChatRoomCreateRequest": {
        "required": true,
        "description": "Chat room create request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ChatRoomCreateRequestSchema"
            }
          }
        }
      },
      "ChatRoomUpdateRequest": {
        "required": true,
        "description": "Chat room update request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ChatRoomUpdateRequestSchema"
            }
          }
        }
      }
    },
    "responses": {
      "Empty200Response": {
        "description": "OK"
      },
      "Empty201Response": {
        "description": "Created"
      },
      "AuthLogin200Response": {
        "description": "Authentication successful",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AuthLoginSuccessSchema"
            }
          }
        }
      },
      "AuthRefreshToken200Response": {
        "description": "Authentication token refresh successful",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AuthRefreshTokenSuccessSchema"
            }
          }
        }
      },
      "AuthUserDetails200Response": {
        "description": "User found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UserDetailSchema"
            }
          }
        }
      },
      "AuthUserSearch200Response": {
        "description": "Search for users successful",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AuthUserSearchSuccessSchema"
            }
          }
        }
      },
      "ReposCreate200Response": {
        "description": "Repository created successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RepoCreateSuccessSchema"
            }
          }
        }
      },
      "ReposGetAll200Response": {
        "description": "Repositories available",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RepoGetAllSuccessSchema"
            }
          }
        }
      },
      "ReposGetUserAssociated200Response": {
        "description": "Repositories available",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RepoGetUserAssociatedSuccessSchema"
            }
          }
        }
      },
      "ReposGetOne200Response": {
        "description": "Repository exists",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RepoGetOneSuccessSchema"
            }
          }
        }
      },
      "OrgCreate200Response": {
        "description": "Organization created successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OrgCreateSuccessSchema"
            }
          }
        }
      },
      "OrgGet200Response": {
        "description": "Organization exists",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OrgGetSuccessSchema"
            }
          }
        }
      },
      "OrgGetMembers200Response": {
        "description": "Organization exists",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OrgGetMembersSuccessSchema"
            }
          }
        }
      },
      "OrgGetTeams200Response": {
        "description": "Organization exists",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OrgGetTeamsSuccessSchema"
            }
          }
        }
      },
      "OrgCreateTeam200Response": {
        "description": "Team created successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TeamDto"
            }
          }
        }
      },
      "OrgGetTeamDetails200Response": {
        "description": "Organization exists",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OrgGetTeamDetailsSuccessSchema"
            }
          }
        }
      },
      "OrgTeamGetMembers200Response": {
        "description": "Organization exists",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OrgTeamGetMembersSuccessSchema"
            }
          }
        }
      },
      "OrgGetSettings200Response": {
        "description": "Organization exists",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OrgGetSettingsSuccessSchema"
            }
          }
        }
      },
      "EduGetAllClassrooms200Response": {
        "description": "Classrooms available",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ClassroomsGetAllSuccessSchema"
            }
          }
        }
      },
      "EduGetClassroomDetails200Response": {
        "description": "Classroom found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ClassroomsGetOneSuccessSchema"
            }
          }
        }
      },
      "EduGetAllClassroomMembers200Response": {
        "description": "Classroom members available",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ClassroomMembersGetAllSuccessSchema"
            }
          }
        }
      },
      "EduGetAllClassroomAssignments200Response": {
        "description": "Classroom assignments available",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ClassroomAssignmentsGetAllSuccessSchema"
            }
          }
        }
      },
      "EduGetClassroomAssignmentDetails200Response": {
        "description": "Classroom assignment found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ClassroomAssignmentsGetOneSuccessSchema"
            }
          }
        }
      },
      "ChatRoomSearch200Response": {
        "description": "Chat rooms search success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ChatRoomSearchSuccessSchema"
            }
          }
        }
      },
      "ChatRoomCreate200Response": {
        "description": "Chat room created successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/Empty200Response"
            }
          }
        }
      },
      "ChatRoomDetails200Response": {
        "description": "Chat room exists",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ChatRoomSchema"
            }
          }
        }
      },
      "ChatRoomMessages200Response": {
        "description": "Chat room messages available",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ChatRoomMessagesSuccessSchema"
            }
          }
        }
      },
      "ChatRoomUnpagedMessages200Response": {
        "description": "Unpaged chat messages",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ChatRoomUnpagedMessagesSuccessSchema"
            }
          }
        }
      },
      "Empty204Response": {
        "description": "No content"
      },
      "AuthLogin400Response": {
        "description": "Missing parameters in authentication request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "EMPTY_PASSWORD",
              "message": "Password cannot be empty"
            }
          }
        },
        "headers": {
          "X-Rate-Limit-Limit": {
            "description": "The number of allowed requests in the current period",
            "schema": {
              "type": "integer",
              "example": 10
            }
          },
          "X-Rate-Limit-Remaining": {
            "description": "The number of remaining requests in the current period",
            "schema": {
              "type": "integer",
              "example": 9
            }
          },
          "X-Rate-Limit-Reset": {
            "description": "The number of seconds left in the current period",
            "schema": {
              "type": "integer",
              "example": 59
            }
          }
        }
      },
      "AuthCreateUser400Response": {
        "description": "Bad user creation request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "EMPTY_PASSWORD",
              "message": "Password cannot be empty"
            }
          }
        },
        "headers": {
          "X-Rate-Limit-Limit": {
            "description": "The number of allowed requests in the current period",
            "schema": {
              "type": "integer",
              "example": 10
            }
          },
          "X-Rate-Limit-Remaining": {
            "description": "The number of remaining requests in the current period",
            "schema": {
              "type": "integer",
              "example": 9
            }
          },
          "X-Rate-Limit-Reset": {
            "description": "The number of seconds left in the current period",
            "schema": {
              "type": "integer",
              "example": 59
            }
          }
        }
      },
      "AuthUpdateUser400Response": {
        "description": "Bad user update request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "WEAK_PASSWORD",
              "message": "Password is weak"
            }
          }
        }
      },
      "AuthUserDetails400Response": {
        "description": "Bad user details request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "INVALID_UUID",
              "message": "Invalid user identifier"
            }
          }
        }
      },
      "AuthUserSearch400Response": {
        "description": "Bad user search request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "INVALID_QUERY",
              "message": "Missing search query string"
            }
          }
        }
      },
      "ReposCreate400Response": {
        "description": "Bad repository create request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "NAME_EXISTS",
              "message": "Repository already exists with chosen name"
            }
          }
        }
      },
      "PagingError": {
        "description": "Paging parameters are invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "PAGE_ERROR",
              "message": "Page index 10 is beyond scale"
            }
          }
        }
      },
      "ReposUpdate400Response": {
        "description": "Bad repository update request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "REPOSITORY_NOT_EXISTS",
              "message": "Git URL does not exist"
            }
          }
        }
      },
      "OrgCreate400Response": {
        "description": "Bad organization create request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "INVALID_NAME",
              "message": "Invalid organization name"
            }
          }
        }
      },
      "OrgUpdate400Response": {
        "description": "Bad organization update request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "USER_NOT_EXISTS",
              "message": "User does not exist"
            }
          }
        }
      },
      "OrgInvite400Response": {
        "description": "Bad organization invite request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "INVALID_EMAIL",
              "message": "Invalid email address"
            }
          }
        }
      },
      "OrgMemberUpdate400Response": {
        "description": "Bad organization member update request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "INVALID_ROLE",
              "message": "Invalid role"
            }
          }
        }
      },
      "OrgCreateTeam400Response": {
        "description": "Bad team create request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "INVALID_TEAM_NAME",
              "message": "Invalid team name"
            }
          }
        }
      },
      "OrgTeamUpdate400Response": {
        "description": "Bad organization team update request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "INVALID_TEAM_NAME",
              "message": "Invalid team name"
            }
          }
        }
      },
      "OrgTeamMemberAdd400Response": {
        "description": "Bad organization team member add request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "INVALID_UUID",
              "message": "Invalid user identifier"
            }
          }
        }
      },
      "OrgTeamMemberUpdate400Response": {
        "description": "Bad organization team member update request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "INVALID_ROLE",
              "message": "Invalid role"
            }
          }
        }
      },
      "OrgGetSettingsUpdate400Response": {
        "description": "Bad organization settings update request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "INVALID_NAME_POLICY",
              "message": "Invalid name policy value"
            }
          }
        }
      },
      "EduCreateClassroom400Response": {
        "description": "Bad classroom create request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "INVALID_SLUG",
              "message": "The slug is already used by another classroom"
            }
          }
        }
      },
      "EduJoinClassroom400Response": {
        "description": "Bad classroom create request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "INVALID_SLUG",
              "message": "The classroom does not exist"
            }
          }
        }
      },
      "EduAddClassroomTeacher400Response": {
        "description": "Bad classroom teacher invitation request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "NOT_A_TEACHER",
              "message": "The provided user is not a teacher"
            }
          }
        }
      },
      "EduUpdateClassroom400Response": {
        "description": "Bad classroom update request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "INVALID_SLUG",
              "message": "The slug is already used by another classroom"
            }
          }
        }
      },
      "EduCreateClassroomAssignment400Response": {
        "description": "Bad classroom assignment create request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "INVALID_DUE_DATE",
              "message": "Invalid due date"
            }
          }
        }
      },
      "EduUpdateClassroomAssignment400Response": {
        "description": "Bad classroom assignment update request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "INVALID_DUE_DATE",
              "message": "Invalid due date"
            }
          }
        }
      },
      "ChatRoomCreate400Response": {
        "description": "Bad chat room create request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "INVALID_MEMBERS",
              "message": "User uuid does not exist"
            }
          }
        }
      },
      "ChatRoomUpdate400Response": {
        "description": "Bad chat room update request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "INVALID_MEMBERS",
              "message": "User uuid does not exist"
            }
          }
        }
      },
      "AuthLogin401Response": {
        "description": "Authentication unsuccessful",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "INVALID_USERNAME",
              "message": "Invalid username or password"
            }
          }
        },
        "headers": {
          "X-Rate-Limit-Limit": {
            "description": "The number of allowed requests in the current period",
            "schema": {
              "type": "integer",
              "example": 10
            }
          },
          "X-Rate-Limit-Remaining": {
            "description": "The number of remaining requests in the current period",
            "schema": {
              "type": "integer",
              "example": 9
            }
          },
          "X-Rate-Limit-Reset": {
            "description": "The number of seconds left in the current period",
            "schema": {
              "type": "integer",
              "example": 59
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "INVALID_TOKEN",
              "message": "Session already expired"
            }
          }
        }
      },
      "NonExistentUser": {
        "description": "User does not exist",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "USER_NOT_EXISTS",
              "message": "User does not exist"
            }
          }
        }
      },
      "Repos404Response": {
        "description": "Repository does not exist",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "REPOSITORY_NOT_EXISTS",
              "message": "Repository does not exist"
            }
          }
        }
      },
      "OrgGet404Response": {
        "description": "Not part of organization response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "UNAUTHORIZED",
              "message": "You are not part of any organization"
            }
          }
        }
      },
      "Org404": {
        "description": "Organizaton does not exist",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "ORGANIZATION_NOT_EXISTS",
              "message": "Organization does not exist"
            }
          }
        }
      },
      "Team404": {
        "description": "Team does not exist",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "TEAM_NOT_EXISTS",
              "message": "Team does not exist"
            }
          }
        }
      },
      "Classroom404": {
        "description": "Classroom does not exist",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "CLASSROOM_NOT_EXISTS",
              "message": "Classroom does not exist"
            }
          }
        }
      },
      "ChatRoom404Response": {
        "description": "Chat room does not exist",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "message": "Chat room does not exist"
            }
          }
        }
      },
      "TooManyRequestsResponse": {
        "description": "Too many requests",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponseSchema"
            },
            "example": {
              "code": "TOO_MANY_REQUESTS",
              "message": "Too many requests!"
            }
          }
        },
        "headers": {
          "X-Rate-Limit-Limit": {
            "description": "The number of allowed requests in the current period",
            "schema": {
              "type": "integer",
              "example": 10
            }
          },
          "X-Rate-Limit-Remaining": {
            "description": "The number of remaining requests in the current period",
            "schema": {
              "type": "integer",
              "example": "0"
            }
          },
          "X-Rate-Limit-Reset": {
            "description": "The number of seconds left in the current period",
            "schema": {
              "type": "integer",
              "example": 37
            }
          }
        }
      }
    }
  }
}